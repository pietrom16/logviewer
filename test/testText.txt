Code refactoring

From Wikipedia, the free encyclopedia

"Refactor" redirects here. For the use of 'refactor' on Wikipedia, see Wikipedia:Refactoring talk pages.
Not to be confused with Code factoring.

Code refactoring is the process of restructuring existing computer code –
changing the factoring – without changing its external behavior. Refactoring
improves nonfunctional attributes of the software. Advantages include improved
code readability and reduced complexity; these can improve source code
maintainability and create a more expressive internal architecture or object
model to improve extensibility. Typically, refactoring applies a series of
standardised basic micro-refactorings, each of which is (usually) a tiny change
in a computer program's source code that either preserves the behaviour of the
software, or at least does not modify its conformance to functional
requirements. Many development environments provide automated support for
performing the mechanical aspects of these basic refactorings. If done
extremely well, code refactoring may also resolve hidden, dormant, or
undiscovered computer bugs or vulnerabilities in the system by simplifying the
underlying logic and eliminating unnecessary levels of complexity. If done
poorly it may fail the requirement that external functionality not be changed,
and/or introduce new bugs.

	By continuously improving the design of code, we make it easier and easier to
	work with. This is in sharp contrast to what
	typically happens: little refactoring and a great deal of attention paid to
	expediently adding new features. If you get into the hygienic habit of
	refactoring continuously, you'll find that it is easier to extend and maintain
	code.
		— Joshua Kerievsky, Refactoring to Patterns[1] Contents [hide]

1 Overview
2 List of refactoring techniques
3 Hardware refactoring
4 History
5 Automated code refactoring
6 See also
7 References
8 Further reading
9 External links

Overview [edit]

Refactoring is usually motivated by noticing a code smell.[2]
For example the method at hand may be very long, or it may be a near duplicate
of another nearby method. Once recognized, such problems can be addressed by
refactoring the source code, or transforming it into a new form that behaves
the same as before but that no longer "smells". For a long routine, one or more
smaller subroutines can be extracted; or for duplicate routines, the
duplication can be removed and replaced with one shared function. Failure to
perform refactoring can result in accumulating technical debt; on the other
hand, refactoring is one of the primary means of repaying technical debt.[3]

There are two general categories of benefits to the activity of refactoring.

1. Maintainability. It is easier to fix bugs because the source code is easy to
read and the intent of its author is easy to grasp.[4] This might be achieved
by reducing large monolithic routines into a set of individually concise,
well-named, single-purpose methods. It might be achieved by moving a method to
a more appropriate class, or by removing misleading comments.
2. Extensibility. It is easier to extend the capabilities of the application if
it uses recognizable design patterns, and it provides some flexibility where
none before may have existed.[1]

Before refactoring a section of code, a solid set of automatic unit
tests is needed. The tests are used to demonstrate that the behavior of the
module is correct before the refactoring. If it inadvertently turns out that a
test fails, then it's generally best to fix the test first, because otherwise
it is hard to distinguish between failures introduced by refactoring and
failures that were already there. After the refactoring, the tests are run
again to verify the refactoring didn't break the tests. Of course, the tests
can never prove that there are no bugs, but the important point is that this
process can be cost-effective: good unit tests can catch enough errors to make
them worthwhile and to make refactoring safe enough.
The process is then an iterative cycle of making a small program transformation,
testing it to ensure correctness, and making another small transformation.
If at any point a test fails, the last small change is undone and repeated in a
different way. Through many small steps the program moves from where it was to
where you want it to be. For this very iterative process to be practical, the
tests must run very quickly, or the programmer would have to spend a large
fraction of his or her time waiting for the tests to finish. Proponents of extreme
programming and other agile software development describe this activity as an
integral part of the software development cycle.

List of refactoring techniques [edit]

Here are some examples of micro-refactorings; some of these may only apply to certain
languages or language types. A longer list can be found in Fowler's refactoring
book[2.345] and website.[5] Many development environments provide automated support
for these micro-refactorings. For instance, a programmer could click on the
name of a variable and then select the "Encapsulate field" refactoring from a
context menu. The IDE would then prompt for additional details, typically with
sensible defaults and a preview of the code changes. After confirmation by the
programmer it would carry out the required changes throughout the code.

Techniques that allow for more abstraction
	- Encapsulate Field – force code to access the field with getter and setter methods.
	- Generalize Type – create more general types to allow for more code sharing.
	- Replace type - checking code with State/Strategy[6] Replace conditional with polymorphism [7].

Techniques for breaking code apart into more logical pieces
	- Componentization breaks code down into reusable semantic units that present clear,
	well-defined, simple-to-use interfaces.
	- Extract Class moves part of the code from an existing class into a new class.
	- Extract Method, to turn part of a larger method into a new method. By breaking down code
	  in smaller pieces, it is more easily understandable. This is also applicable to functions.

Techniques for improving names and location of code
	- Move Method or Move Field – move to a more appropriate Class or source file
	- Rename Method or Rename Field – changing the name into a new one that better reveals its purpose
	- Pull Up – in OOP, move to a superclass
	- Push Down – in OOP, move to a subclass

